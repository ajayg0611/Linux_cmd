-----------------------Redirection Error -------------------------------
Name       FD   Description
   stdin    0   standard input stream (e.g. keyboard)
   stdout   1   standard output stream (e.g. monitor)
   stderr   2   standard error output stream (usually also on monitor
   
   vi redirection.sh
     # stdout from bash script to stderr
     echo "Hello! Big Data @ Bash" 1>&2 
     # stderr from bash script to /dev/null
     # Note that there's no command called 'dates'

     dates 2>&1  // This will display errors
     dates 2>/dev/null // This will not display errors

     # stderr and stdout to file
     dates &> outfile.txt


 Bash conditional statements

Operator    Description
-eq         Equal to
-ne         Not equal to
-gt         Greater than
-ge         Greater than OR equal to
-lt         less than
-le         less than OR equal to

     vi bash-ifelse.sh
       #!/bin/bash

       total=${1}
       if [ $total -eq 1 ]; then
         echo "the number is equal to 1"
       else
         echo "the number is NOT equal to 1"
       fi
    
    bash bash-ifelse.sh




Bash file test operators

File Test   Operator Description
-e           File exists (this could be regular file, directory, block device, character device, etc.,)
-f           It’s a regular file (for example: /etc/shadow)
-d           It’s a directory (for example: /var)
-b           It’s a block device (for example:/dev/sdb)
-c           It’s a character device (for example:/dev/tty2)
-s           File is not empty
-r           File read permission
-w           File write permission
-x           File execute permission
-u           suid set on the file
-g           sgid set on the file
-k           Sticky bit set on the file
-p           It’s a pipe
-S           It’s a socket
-h           It’s a symbolic link
-t           Checks whether the given FD is opened in a terminal.
-O           You own the file
-G           File group id and my group id are the same.
-N           Did the file got modified since last read?
file-a -nt file-b   file-a is newer than file-b
file-a -ot file-b   File1 is older than file2
file-a -ef file-b   Both file1 and file2 are hard linked to the same file



#!/bin/bash

directory=$1

# bash check if directory exists
if [ -d $directory ]; then
    echo "Directory exists!"
else 
    echo "Directory does not exists!"
fi





--------------Case Statement-------------------
vi bash-case.sh

#!/bin/bash
echo "What is your scripting language? (0 = EXIT)"
echo "1) bash"
echo "2) perl"
echo "3) phyton"
echo "4) None of the above !"
read case;

case $case in
    1) echo "You've selected bash!";;
    2) echo "You've selected perl!";;
    3) echo "You've selected phyton!";;
    0) exit
esac

bash bash-case.sh







--------------Bash for loop------------------------------
Bash `loop` statements

For loops allow repeated execution of a command sequence based on an iteration variable. Bash supports two kinds of for loop, a “list of values” and a “traditional” c-like method.

for varname in list
do
    commands 
done

Note that

1.  Bash for, in, do and done are keywords

2.  list contains a list of items, which can be in the statement or fetched from a variable that contains several words separated by spaces.

3.If list is missing from the for statement, then bash uses positional parameters that were passed into the shell.

Example:

vi bash-for-loop.sh

#!/bin/bash
i=1
for day in Mon Tue Wed Thu Fri
do
echo "$(( i++ )) : $day"
done


bash bash-for-loop.sh

-----------------------Redirection Error -------------------------------
Name       FD   Description
   stdin    0   standard input stream (e.g. keyboard)
   stdout   1   standard output stream (e.g. monitor)
   stderr   2   standard error output stream (usually also on monitor
   
   vi redirection.sh
     # stdout from bash script to stderr
     echo "Hello! Big Data @ Bash" 1>&2 
     # stderr from bash script to /dev/null
     # Note that there's no command called 'dates'

     dates 2>&1  // This will display errors
     dates 2>/dev/null // This will not display errors

     # stderr and stdout to file
     dates &> outfile.txt


 Bash conditional statements

Operator    Description
-eq         Equal to
-ne         Not equal to
-gt         Greater than
-ge         Greater than OR equal to
-lt         less than
-le         less than OR equal to

     vi bash-ifelse.sh
       #!/bin/bash

       total=${1}
       if [ $total -eq 1 ]; then
         echo "the number is equal to 1"
       else
         echo "the number is NOT equal to 1"
       fi
    
    bash bash-ifelse.sh




Bash file test operators

File Test   Operator Description
-e           File exists (this could be regular file, directory, block device, character device, etc.,)
-f           It’s a regular file (for example: /etc/shadow)
-d           It’s a directory (for example: /var)
-b           It’s a block device (for example:/dev/sdb)
-c           It’s a character device (for example:/dev/tty2)
-s           File is not empty
-r           File read permission
-w           File write permission
-x           File execute permission
-u           suid set on the file
-g           sgid set on the file
-k           Sticky bit set on the file
-p           It’s a pipe
-S           It’s a socket
-h           It’s a symbolic link
-t           Checks whether the given FD is opened in a terminal.
-O           You own the file
-G           File group id and my group id are the same.
-N           Did the file got modified since last read?
file-a -nt file-b   file-a is newer than file-b
file-a -ot file-b   File1 is older than file2
file-a -ef file-b   Both file1 and file2 are hard linked to the same file



#!/bin/bash

directory=$1

# bash check if directory exists
if [ -d $directory ]; then
    echo "Directory exists!"
else 
    echo "Directory does not exists!"
fi





--------------Case Statement-------------------
vi bash-case.sh

#!/bin/bash
echo "What is your scripting language? (0 = EXIT)"
echo "1) bash"
echo "2) perl"
echo "3) phyton"
echo "4) None of the above !"
read case;

case $case in
    1) echo "You've selected bash!";;
    2) echo "You've selected perl!";;
    3) echo "You've selected phyton!";;
    0) exit
esac

bash bash-case.sh


--------------Bash for loop------------------------------
Bash `loop` statements

For loops allow repeated execution of a command sequence based on an iteration variable. Bash supports two kinds of for loop, a “list of values” and a “traditional” c-like method.

for varname in list
do
    commands 
done

Note that

1.  Bash for, in, do and done are keywords

2.  list contains a list of items, which can be in the statement or fetched from a variable that contains several words separated by spaces.

3.If list is missing from the for statement, then bash uses positional parameters that were passed into the shell.

Example:

vi bash-for-loop.sh

#!/bin/bash
i=1
for day in Mon Tue Wed Thu Fri
do
echo "$(( i++ )) : $day"
done


bash bash-for-loop.sh



----------------c-style-loop-------------------------------
#!/bin/bash

for (( i=1; i <= 3; i++ ))
do
    echo "Your random number $i: $RANDOM"
done



------------- while loop-------------------------------
Bash while loop:

while expression
do
    commands
done


Note that

1. while, do, done are keywords
2. Expression is any expression which returns a scalar value
3. Commands between do and done are executed while the provided conditional expression is true

vi bash-whileloop.sh

#!/bin/bash

# This script prints 4 sequential numbers 0 1 2 3.

x="0"

while [ $x -lt 4 ]
do
    x=$[$x+1]
    echo $x
done


bash bash-whileloop.sh



------------------------Complex example of bash-------------------------
#!/bin/bash
 
select=0

echo "1. Apple"
echo "2. Oragne"
echo "3. Lime"

echo -n "Please select [1,2 or 3] : "

# Loop while the variable 'select' is equal 0
# bash while loop

while [ $select -eq 0 ]; do
 
# read user input
read select

# bash nested if/else
if [ $select -eq 1 ] ; then
 
        echo "You have selected: Apple"

else                   

        if [ $select -eq 2 ] ; then
                 echo "You have selected: Orange"
        else
         
                if [ $seelct -eq 3 ] ; then
                        echo "You have selected: Lime"
                else
                        echo "Please select between 1-3 !"
                        echo "1. Apple"
                        echo "2. Ornage"
                        echo "3. Lime"
                        echo -n "Please select [1,2 or 3] : "
                        choice=0
                fi   
        fi
fi
done


notepad

head unirank.csv
  head -n 25 unirank.csv
  apt install python3-csvkit
  head  unirank.csv | csvlook
  head -n 25 unirank.csv | csvlook
  grep -i "college" unirank.csv | csvlook
  wc -l unirank.csv
  grep -i "college" unirank.csv | wc -l
  grep "CA" unirank.csv | csvlook
  
  Finding the number of institutes in all states
  cat unirank.csv | cut -f1,3 -d, | csvlook
  cat unirank.csv | cut -f1,3 -d, | sort -k 2 -t"," |csvlook
  cat unirank.csv | cut -f3 -d, | sort | uniq -c | csvlook
  
  correlation between university tuition and ranks (cat, cut, tail and redirect)
  cat unirank.csv | cut -f4,6 -d, > udata.csv
  sudo pip install bashplotlib
  cat udata.csv| tail -n +2 | scatter
  
  apt install bc
  bc -l <<< "7/232*100"




